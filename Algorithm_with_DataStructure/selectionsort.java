//############################################################
// | cafe       | http://cafe.naver.com/dremdelover          |
// | Q&A        | https://open.kakao.com/o/gX0WnTCf          |
// | business   | ultrasuperrok@gmail.com                    |
//############################################################
/*
    selectionSort 함수:
    - 주어진 배열에서 최소값을 찾아 현재 위치의 값과 교환합니다.
    - 이러한 과정을 배열의 끝에 도달할 때까지 반복합니다.
    
    시간 복잡도:
    - 선택 정렬의 시간 복잡도는 O(n^2)입니다. 
    - 이는 모든 원소를 한 번씩 비교하기 때문에, 데이터의 양이 많아질수록 성능이 떨어지는 정렬 방법입니다.
    
    사용 경우:
    - 정렬해야 하는 데이터의 크기가 작을 때 사용하기 좋습니다.
    - 메모리가 제한적인 경우에 사용하기도 합니다(제자리 정렬 알고리즘이기 때문입니다).
    
    상세 동작 과정:
    1. 현재 위치를 최소값으로 가정하고 이후의 원소들 중에서 실제 최소값의 위치를 찾습니다.
    2. 찾은 최소값의 위치(이하 minIdx)와 현재 값을 교환합니다.
    3. 현재 위치를 한 칸 옮기고, 다시 위의 과정을 반복합니다.

    예) arr = [64, 25, 12, 22, 11]
    첫 번째 loop: minIdx = 4, arr[4]과 arr[0]을 교환 => [11, 25, 12, 22, 64]
    두 번째 loop: minIdx = 2, arr[2]과 arr[1]을 교환 => [11, 12, 25, 22, 64]
    세 번째 loop: minIdx = 3, arr[3]과 arr[2]을 교환 => [11, 12, 22, 25, 64]
    네 번째 loop: minIdx = 3, arr[3]과 arr[3]을 교환(자기 자신과의 교환은 실제로는 이루어지지 않음) => [11, 12, 22, 25, 64]
    최종 결과: [11, 12, 22, 25, 64]
*/

public class SelectionSort {

    // 선택 정렬 메서드
    static void selectionSort(int[] arr) {
        // 배열의 길이를 n에 저장합니다.
        int n = arr.length;

        // 외부 반복문: 배열의 각 요소를 대상으로 순회합니다.
        // 마지막 요소는 자동으로 정렬되므로, n-1까지만 순회합니다.
        for (int i = 0; i < n-1; i++) {
            // 최소값의 인덱스를 저장하는 변수를 현재 인덱스로 초기화합니다.
            int minIdx = i;

            // 내부 반복문: 현재 인덱스 i+1부터 배열의 끝까지 순회하면서 
            // 현재 최소값(minIdx)과 비교하여 더 작은 값을 찾습니다.
            for (int j = i+1; j < n; j++)
                // 현재 요소가 최소값보다 작으면, 최소값 인덱스를 업데이트합니다.
                if (arr[j] < arr[minIdx])
                    minIdx = j;

            // 최소값을 찾았다면, 현재 인덱스(i)와 최소값 인덱스(minIdx)의 요소를 교환합니다.
            int temp = arr[minIdx]; // 최소값을 임시 변수에 저장합니다.
            arr[minIdx] = arr[i]; // 최소값 위치에 현재 값을 저장합니다.
            arr[i] = temp; // 현재 위치에 최소값을 저장합니다.
        }
    }

    // 메인 메서드
    public static void main(String[] args) {
        // 정렬할 배열을 초기화합니다.
        int[] arr = {64, 25, 12, 22, 11};
        // 선택 정렬 메서드를 호출하여 배열을 정렬합니다.
        selectionSort(arr);
        // "Sorted array: " 문구를 출력합니다.
        System.out.print("Sorted array: ");
        // 정렬된 배열을 출력합니다.
        for(int i=0; i<arr.length; i++)
            System.out.print(arr[i] + " ");
    }
}
